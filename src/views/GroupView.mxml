<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="MatchingView"
		initialize="initializeHandler(event)" 
		xmlns:local="*"
		width="100%">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		/* Remove the drag cursors */
		mx|DragManager {
			moveCursor: Embed('1x1.gif');
			copyCursor: Embed('1x1.gif');
			rejectCursor: Embed('1x1.gif');
			linkCursor: Embed('1x1.gif');
		}
		
		.groupHeader {
			fontSize : 30;
			fontWeight : bold;
			paddingBottom : 10;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			import spark.layouts.supportClasses.DropLocation;
			
			import model.IconItemRendererObject;
			
			
			[Bindable]
			private var dragSourceList : ArrayList;				

			protected function initializeHandler(event:FlexEvent):void
			{
				dragSourceList = IconItemRendererObject.initArrayList(new Array("inside","often","yesterday","there","daily","always","away","near","later","behind"));
			}
			
			protected function sourceDragEnterHandler(event:DragEvent):void
			{
				trace("drag Enter Handler");
				if (event.target != event.dragInitiator && event.target !=
					event.dragInitiator.owner) {
					DragManager.acceptDragDrop(event.target as IUIComponent);
					DragManager.showFeedback(DragManager.MOVE);
				} else {
					DragManager.showFeedback(DragManager.NONE);
				}
			}
			
			private function sourceDragDropHandler(event:DragEvent):void {
				trace("SOURCE drag Drop Handler");
				var val:Object = event.dragSource.dataForFormat("listData");
				(event.target as List).dataProvider.addItem(val);
	//			glowFilter.play();
			}
			
			
			private function groupDragDropHandler(event:DragEvent):void {
				trace("GROUP drag Drop Handler");
				var val:Object = event.dragSource.dataForFormat("listData");
				if (val)
					(event.target as List).dataProvider.addItem(val);
					//			glowFilter.play();
			}
				
			// allow dragging from any group to any other group but prevent it from within a group 
			protected function dragOverHandler(event:DragEvent):void
			{
				// Explpicitly handle the dragOver event.            
				event.preventDefault();
				
				// Since you are explicitly handling the dragOver event,
				// call showDropIndicator() to have the drop target
				// display the drop indicator.
				// The drop indicator is removed
				// automatically for the list controls by the built-in 
				// event handler for the dragDrop event.
				var dropLocal:DropLocation = 
					event.currentTarget.layout.calculateDropLocation(event);
				event.currentTarget.layout.showDropIndicator(dropLocal);
				
				// if the drag initiated from anything other than the current list allow it (we only allow moving items between groups not re-ordering items in a group)
				if (event.dragInitiator.name == event.currentTarget.name) {
					// Drag not allowed.
					DragManager.showFeedback(DragManager.NONE); 
				} else {
					DragManager.showFeedback(DragManager.MOVE);
				}  
			}
			
		]]>
	</fx:Script>
	
	
	<s:VGroup paddingLeft="20" paddingRight="20" paddingTop="40" horizontalAlign="center" >
		<s:Label text="Drag the adverbs to the correct list" paddingBottom="20" />
		<s:SkinnableContainer skinClass="skins.ListDropShadow">
			<s:List dataProvider="{dragSourceList}"
					dragEnabled="true"
					dropEnabled="true"
					dragMoveEnabled="true"
					dragEnter="sourceDragEnterHandler(event)"
					dragDrop="sourceDragDropHandler(event)"
					dragOver="dragOverHandler(event)"
					width="100%"
					height="100%"
					>
				<s:layout>
					<s:TileLayout requestedColumnCount="5"
								  requestedRowCount="2"
								  horizontalGap="10"
								  verticalGap="5" />
				</s:layout>
				<s:itemRenderer >
					<fx:Component>
						<local:DraggableIconItemRenderer iconPlaceholder="@Embed('icons/DragThumb.png')" iconWidth="60" iconHeight="60" iconField="icon" labelField="label" />
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:SkinnableContainer>
			

		<s:HGroup width="100%" paddingTop="80" >
			<s:VGroup>
				
				<s:Label text="When" width="100%" textAlign="center" styleName="groupHeader" />
				<s:SkinnableContainer skinClass="skins.ListDropShadow">
					<s:List id="whenList" 
							width="400" 
							dragEnabled="true" 
							dropEnabled="true"
							dragMoveEnabled="true"
							verticalScrollPolicy="off"
							dragOver="dragOverHandler(event)"
							dragDrop="groupDragDropHandler(event)"
							>
						<s:itemRenderer>
							<fx:Component>
								<local:DraggableIconItemRenderer iconPlaceholder="@Embed('icons/DragThumb.png')" iconWidth="60" iconHeight="60" iconField="icon" labelField="label" />
							</fx:Component>
						</s:itemRenderer>
					</s:List>
				</s:SkinnableContainer>
			</s:VGroup>
			<s:Spacer width="60" />
			<s:VGroup>
				<s:Label text="Where" width="100%" textAlign="center" styleName="groupHeader" />
				<s:SkinnableContainer skinClass="skins.ListDropShadow">
					<s:List id="whereList" width="400" height="100%"
							dropEnabled="true"
							dragEnabled="true"
							dragMoveEnabled="true"
							dragOver="dragOverHandler(event)"
							verticalScrollPolicy="off">
						<s:itemRenderer>
							<fx:Component>
								<local:DraggableIconItemRenderer iconPlaceholder="@Embed('icons/DragThumb.png')" iconWidth="60" iconHeight="60" iconField="icon" labelField="label" />
							</fx:Component>
						</s:itemRenderer>
					</s:List>
				</s:SkinnableContainer>
			</s:VGroup>
		</s:HGroup>

	</s:VGroup>
</s:View>
