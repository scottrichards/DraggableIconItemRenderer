<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="MatchingView"
		initialize="initializeHandler(event)" xmlns:local="*">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		/* Remove the drag cursors */
		mx|DragManager {
			moveCursor: Embed('1x1.gif');
			copyCursor: Embed('1x1.gif');
			rejectCursor: Embed('1x1.gif');
			linkCursor: Embed('1x1.gif');
		}
		
		.largeFont {
			fontSize : 50;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			import spark.layouts.supportClasses.DropLocation;
			
			import model.IconItemRendererObject;
			
				
			// Variable to store original border color.
			private var tempBorderColor:uint;
			
			// Flag to indicate that tempBorderColor has been set.
			private var borderColorSet:Boolean = false;
			
			[Bindable]
			private var leftListSource : ArrayList;
			[Bindable]
			private var rightListSource : ArrayList;
			[Bindable]
			private var separatorListSource : ArrayList;
		
			
			protected function initializeHandler(event:FlexEvent):void
			{
				leftListSource =  new ArrayList(new Array(	new IconItemRendererObject("White Hen puts the river in her basket."), 
															new IconItemRendererObject("White Hen finds a letter while looking for bugs to eat."), 
															new IconItemRendererObject("The flame becomes a pile of ash."),
															new IconItemRendererObject("The fox decides to go along with White Hen.")));
				rightListSource = new ArrayList(new Array({label: "at the last minute"}, {label: "correct answer or idea"}, {label: "not quite"}));
				separatorListSource = new ArrayList(new Array("<----->", "<----->", "<----->"));
				
			}
			
//			protected function dragExitHandler(event:DragEvent):void
//			{
//				event.preventDefault();
//				trace("dragExitHandler");
//			}
			
			// Restore the border color.
			private function dragExitHandler(event:DragEvent):void {
				event.currentTarget.setStyle('borderColor', tempBorderColor);
				borderColorSet = true;
			}
			
			private function dragOverHandler(event:DragEvent):void {
				
				// Explpicitly handle the dragOver event.            
				event.preventDefault();
				
				// Since you are explicitly handling the dragOver event,
				// call showDropIndicator() to have the drop target
				// display the drop indicator.
				// The drop indicator is removed
				// automatically for the list controls by the built-in 
				// event handler for the dragDrop event.
				var dropLocal:DropLocation = 
					event.currentTarget.layout.calculateDropLocation(event);
				event.currentTarget.layout.showDropIndicator(dropLocal);
			
				// if the drag initiated from anything other than the current list prevent it (we only allow moving items within the current list)
				if (event.dragInitiator.name != event.currentTarget.name) {
					// Drag not allowed.
					DragManager.showFeedback(DragManager.NONE); 
				} else {
					DragManager.showFeedback(DragManager.MOVE);
				}              
			}
			

			
		]]>
	</fx:Script>
	
	
	<s:VGroup paddingLeft="20" paddingRight="20" paddingTop="40" horizontalAlign="center" width="100%" >
		<s:Label text="Drag the events into the correct order from first at top to last at bottom" />
		<s:HGroup width="100%" paddingTop="20" >
			<s:SkinnableContainer id="myContainer"
								  skinClass="skins.ListSkin">
				<s:List id="myList" 
						name="leftList"
						width="100%" 
						dragEnabled="true" 
						dropEnabled="true"
						dragMoveEnabled="true"
						dragExit="dragExitHandler(event)"
						dragOver="dragOverHandler(event);"
						dataProvider="{leftListSource}"
						verticalScrollPolicy="off"
						>
					<s:itemRenderer>
						<fx:Component>
							<local:DraggableIconItemRenderer iconPlaceholder="@Embed(source='icons/DragThumb.png')" iconWidth="60" iconHeight="60" fontSize="26" labelField="label" iconField="icon" />
						</fx:Component>
					</s:itemRenderer>
				</s:List>
			</s:SkinnableContainer>
		</s:HGroup>

	</s:VGroup>
</s:View>
