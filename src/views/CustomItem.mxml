<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="MatchingView"
		initialize="initializeHandler(event)" xmlns:local="*" xmlns:Renderers="Renderers.*">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		/* Remove the drag cursors */
		mx|DragManager {
			moveCursor: Embed('1x1.gif');
			copyCursor: Embed('1x1.gif');
			rejectCursor: Embed('1x1.gif');
			linkCursor: Embed('1x1.gif');
		}
	</fx:Style>
	<fx:Declarations>
		<s:AnimateFilter id="glowFilter" target="{myList}"
						 bitmapFilter="{filter}"/>
		<s:GlowFilter id="filter"/>
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.core.IDataRenderer;
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import spark.layouts.supportClasses.DropLocation;
			import mx.collections.ArrayList;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
				
			// Variable to store original border color.
			private var tempBorderColor:uint;
			
			// Flag to indicate that tempBorderColor has been set.
			private var borderColorSet:Boolean = false;
			
			[Embed(source="/icons/DragThumb.png")]
			private var DragThumbClass:Class;
			
			[Bindable]
			private var leftListSource : ArrayList;
			[Bindable]
			private var rightListSource : ArrayList;
			[Bindable]
			private var separatorListSource : ArrayList;
			
			private function createDataProvider():ArrayList
			{
				var a:Array = new Array();
				a.push("close but no cigar");
				a.push("at the eleventh hour");
				a.push("that's the ticket");
				
				return new ArrayList(a);
			}
			
			protected function initializeHandler(event:FlexEvent):void
			{
				leftListSource =  new ArrayList(new Array("close but no cigar", "at the eleventh hour", "that's the ticket"));
//				rightListSource = new ArrayList(new Array("at the last minute", "correct answer or idea", "not quite"));
				rightListSource = new ArrayList(new Array({label: "at the last minute", icon: "/icons/DragThumb.png"}, {label: "correct answer or idea", icon : "/icons/DragThumb.png"}, {label: "not quite", icon: "/icons/DragThumb.png"}));
				separatorListSource = new ArrayList(new Array("<----->", "<----->", "<----->"));
				
			}
			
//			protected function dragExitHandler(event:DragEvent):void
//			{
//				event.preventDefault();
//				trace("dragExitHandler");
//			}
			
			// Restore the border color.
			private function dragExitHandler(event:DragEvent):void {
				event.currentTarget.setStyle('borderColor', tempBorderColor);
				borderColorSet = true;
			}
			
			private function dragOverHandler(event:DragEvent):void {
				
				// Explpicitly handle the dragOver event.            
				event.preventDefault();
				
				// Since you are explicitly handling the dragOver event,
				// call showDropIndicator() to have the drop target
				// display the drop indicator.
				// The drop indicator is removed
				// automatically for the list controls by the built-in 
				// event handler for the dragDrop event.
				var dropLocal:DropLocation = 
					event.currentTarget.layout.calculateDropLocation(event);
				event.currentTarget.layout.showDropIndicator(dropLocal);
			
				// if the drag initiated from anything other than the current list prevent it (we only allow moving items within the current list)
				if (event.dragInitiator.name != event.currentTarget.name) {
					// Drag not allowed.
					DragManager.showFeedback(DragManager.NONE); 
				} else {
					DragManager.showFeedback(DragManager.MOVE);
				}              
			}
			
			private function dragBegin(event:MouseEvent):void {
				var target:IUIComponent = event.target as IUIComponent;
				if (target) {
					target.addEventListener(DragEvent.DRAG_COMPLETE, dragCompleteHandler);
					var source:DragSource = new DragSource();
					source.addData((target as IDataRenderer).data, "listData");
					DragManager.doDrag(target, source, event);
				}
			}
			
			private function dragCompleteHandler(event:DragEvent):void {
				if(event.action != DragManager.NONE) {
					event.target.removeEventListener(DragEvent.DRAG_COMPLETE,
						dragCompleteHandler);
					var list:List = (event.target.owner as List);
					var data:Object = event.dragSource.dataForFormat("listData");
					list.dataProvider.removeItemAt(
						list.dataProvider.getItemIndex(data) );
				}
				
			}
			
			private function dragEnterHandler(event:DragEvent):void {
				if(event.target != event.dragInitiator && event.target !=
					event.dragInitiator.owner) {
					DragManager.acceptDragDrop(event.target as IUIComponent);
					DragManager.showFeedback(DragManager.MOVE);
				} else {
					DragManager.showFeedback(DragManager.NONE);
				}
			}
			
			private function dragDropHandler(event:DragEvent):void {
				var val:Object = event.dragSource.dataForFormat("listData");
				(event.target as List).dataProvider.addItem(val);
				glowFilter.play();
			}
			
	
			
		]]>
	</fx:Script>
	
	
	<s:VGroup paddingLeft="20" paddingRight="20" paddingTop="40" horizontalAlign="center" >
		<s:Label text="Match each idiom with its meaning" />
		<s:HGroup width="100%" paddingTop="20" >
			
			<s:List id="myList" 
					name="leftList"
					width="400" 
					borderColor="#3A3A9A"
					borderVisible="true"
					verticalScrollPolicy="off"
					mouseDown="dragBegin(event)"
					dragEnter="dragEnterHandler(event)"
					dragDrop="dragDropHandler(event)"
					dataProvider="{leftListSource}">
				<s:itemRenderer>
					<fx:Component>
						<Renderers:MyMXMLItemRenderer />											
					</fx:Component>
				</s:itemRenderer>

			</s:List>
			<s:Spacer width="10" /> 
			<s:Spacer width="10" /> 
			<s:VGroup>
				<s:List id="destlist" width="400" height="100%"
						name="rightList"
						borderColor="#3A3A9A"
						borderVisible="true"
						itemRenderer="Renderers.MyMXMLItemRenderer"

						mouseDown="dragBegin(event)"
						dragEnter="dragEnterHandler(event)"
						dragDrop="dragDropHandler(event)"
						verticalScrollPolicy="off"
						>
					<s:dataProvider>
						<!-- empty arraylist -->
						<s:ArrayList/>
					</s:dataProvider>
				</s:List>
			</s:VGroup>
		</s:HGroup>

	</s:VGroup>
</s:View>
